[
  {"symbol": 1, "title": "EBS Volume Tagging Inheritance", "header": "A number of cloud CI/CD workflows don't tag EBS volumes in AWS by default. If an organization is allocating cost by tag values, this can lead to untracked costs that can be diffcult to identify and even more difficult to remidiate.", "gist": "justwes2/ad335930de6e51d6a06c5a184c28d9d1", "walkthrough": "To address this issue, I developed a small Lamdba fuction that can be attached to a cloudwatch EC2 state change trigger. When an instance is launched, the fucntion ensure that all values are passed down to any attached volumes. Any existing tag keys will not have their values overwritten. I also added error handling for 'aws' prefixed tags, which cannot be applied by the user.", "repo": null},
  {"symbol": 2, "title": "Retiring Instance Report Generator", "header": "Like all servers, AWS hardware needs to be retired and replaced periodically. When a vm in your account is slated for retirement, the account root is emailed. Additionally, a cloudwatch alarm is available to notify the administrators about the pending retirement. However, this functionality is not available in AWS’s GovCloud.", "gist": "justwes2/75e86e63fba22f11c13c189ee24c6ee9", "walkthrough": "I designed this function to create a csv with all instances scheduled for retirement in an account. This function can be run on a schedule- weekly will provide at least seven days notice about a retiring instance. By porting the output to a csv, it can easily be consumed by a number of management engines.", "repo": null},
  {"symbol": 3, "title": "AWS Team Policy Generator", "header": "One strategy for preventing teams from affecting other teams’ resources in a shared cloud environment is to apply tag-based access policies. With this sort of IAM policy in place, a user is prevented from accidentally terminating someone else’s resource. However, writing custom IAM policy can be tricky and tedious, and small errors create the possibly for large scale disruption.", "gist": "justwes2/7c535b66a0f2aaf55d86c51eb407608e", "walkthrough": "To create a repeatable, identical policy for each team, I developed a small application where the cloud management team could write policy template documents instantiating desired permissions for roles, and generate identical policies for each team. The next phase for this project with be to incorporate AWS’s boto3 sdk to automate creation and updating of team policies, roles, and groups.", "repo": "https://github.com/justwes2/AWS_policy_generator"},
  {"symbol": 4, "title": "AWS EC2 Tagging Validation", "header": "Tagging is a powerful way to manage access, permissions, and billing in a cloud environment. However, a tagging standard is only as effective as its implementation. How do you get users to tag their resources? Then, when resources are tagged, what happens if someone fat-fingers a value? How do you account for when people put ‘TBD’ for a value?", "gist": "justwes2/38144de5a39a9eea6afc3d14461675f0", "walkthrough": "To ensure that all resources are tagged with the correct keys, and from an accepted list of values, I developed this Lambda function. It listens for an EC2 start event Cloudwatch alarm, then interrogates the new instance. It checks the tag values against a DynamoDB table containing all valid tag values. If the instance does not have all tags with accepted values, the function stops the resource to reduce untracked charges in the cloud environment.", "repo": null},
  {"symbol": 5, "title": "Add Element to DynamoDB Table", "header": "Having a DynamoDB table with all valid tag values can be an effective single source of truth for designing a number of compliance and governance tools. However, the table is only valuable if it is kept up to date. In a large organization with new teams and apps being added constantly, the table can fall out of date quickly. When this happens, it can break governance mechanisms very quickly. If the cloud environment turns off resources that don’t have tags from the table, new teams and projects will be unable to make progress until the table is updated.", "gist": "justwes2/a187d0d2398a6222ec7d01a4e64bf5e0", "walkthrough": "I developed a program to quickly add a value to a DynamoDB table. It is a command line application, so it can be run in a number of environments, including on a workstation or as a part of an onboarding pipeline process.", "repo": null}
]
